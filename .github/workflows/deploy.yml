name: Deploy to Azure

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  AZURE_WEBAPP_NAME: kilometers-api
  DOTNET_VERSION: "9.0.x"
  GO_VERSION: "1.21"

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Restore .NET dependencies
        run: dotnet restore api/Kilometers.Api/Kilometers.Api.csproj

      - name: Build .NET application
        run: dotnet build api/Kilometers.Api/Kilometers.Api.csproj --no-restore

      - name: Test .NET application
        run: dotnet test api/Kilometers.Api/Kilometers.Api.csproj --no-build --verbosity normal

      - name: Build Go CLI
        run: |
          cd cli
          go mod tidy
          go build -v ./...

  deploy-infrastructure:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    outputs:
      api-url: ${{ steps.terraform.outputs.api_url }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0
          terraform_wrapper: false

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        run: |
          cd terraform
          terraform init

      - name: Terraform Plan
        run: |
          cd terraform
          terraform plan -out=tfplan
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

      - name: Terraform Apply
        id: terraform
        run: |
          cd terraform
          terraform apply -auto-approve tfplan
          echo "api_url=$(terraform output -raw api_url)" >> $GITHUB_OUTPUT
          echo "resource_group=$(terraform output -raw resource_group_name)" >> $GITHUB_OUTPUT
        env:
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

  deploy-api:
    needs: [test, deploy-infrastructure]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Build and publish
        run: |
          cd api/Kilometers.Api
          dotnet restore
          dotnet build --configuration Release --no-restore
          dotnet publish --configuration Release --output ./publish

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to App Service
        run: |
          cd api/Kilometers.Api/publish
          zip -r ../deployment.zip .
          cd ..
          az webapp deployment source config-zip \
            --resource-group "${{ needs.deploy-infrastructure.outputs.resource_group }}" \
            --name "$(echo "${{ needs.deploy-infrastructure.outputs.api_url }}" | sed 's|https://||' | sed 's|\.azurewebsites\.net||')" \
            --src deployment.zip

  build-cli:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ env.GO_VERSION }}

      - name: Build CLI for multiple platforms
        run: |
          cd cli
          mkdir -p dist

          # Linux AMD64
          GOOS=linux GOARCH=amd64 go build -o dist/km-linux-amd64 .

          # macOS Intel
          GOOS=darwin GOARCH=amd64 go build -o dist/km-darwin-amd64 .

          # macOS ARM64
          GOOS=darwin GOARCH=arm64 go build -o dist/km-darwin-arm64 .

          # Windows AMD64
          GOOS=windows GOARCH=amd64 go build -o dist/km-windows-amd64.exe .

      - name: Upload CLI artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cli-binaries
          path: cli/dist/*
          retention-days: 30

  post-deploy-test:
    needs: [deploy-api, deploy-infrastructure]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Test API health endpoint
        run: |
          API_URL="${{ needs.deploy-infrastructure.outputs.api_url }}"
          echo "Testing API at: $API_URL"

          # Wait for deployment to complete
          sleep 60

          # Test health endpoint
          curl -f "$API_URL/health" || exit 1

          # Test root endpoint
          curl -f "$API_URL/" || exit 1

          echo "âœ… API deployment successful and healthy!"
