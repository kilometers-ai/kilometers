name: Deploy Infrastructure

on:
  push:
    paths:
      - "terraform/**"
      - ".github/workflows/deploy-infrastructure.yml"
    branches:
      - main
  pull_request:
    paths:
      - "terraform/**"
      - ".github/workflows/deploy-infrastructure.yml"
  workflow_dispatch:
    inputs:
      action:
        description: "Terraform action to perform"
        required: true
        default: "apply"
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  TERRAFORM_VERSION: "1.6.0"
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}

jobs:
  terraform-check:
    name: Terraform Validation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Format Check
        working-directory: ./terraform
        run: terraform fmt -check -recursive

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -backend=false

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

  terraform-plan:
    name: Terraform Plan
    needs: terraform-check
    runs-on: ubuntu-latest
    outputs:
      changes: ${{ steps.plan.outputs.changes }}

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Plan
        id: plan
        working-directory: ./terraform
        run: |
          terraform plan -out=tfplan -detailed-exitcode || exit_code=$?

          if [ "${exit_code}" == "2" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Terraform will perform the following changes:"
            terraform show -no-color tfplan
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "No changes required."
          fi

      - name: Upload Plan
        if: steps.plan.outputs.changes == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: terraform/tfplan
          retention-days: 7

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Plan ðŸ“–

            \`\`\`
            ${{ steps.plan.outputs.stdout }}
            \`\`\`

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  terraform-apply:
    name: Terraform Apply
    needs: terraform-plan
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' && 
      github.event_name != 'pull_request' && 
      (needs.terraform-plan.outputs.changes == 'true' || github.event.inputs.action == 'apply')
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          terraform_wrapper: false

      - name: Download Plan
        if: needs.terraform-plan.outputs.changes == 'true'
        uses: actions/download-artifact@v4
        with:
          name: tfplan
          path: terraform

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Apply
        id: apply
        working-directory: ./terraform
        run: |
          if [ -f "tfplan" ]; then
            terraform apply -auto-approve tfplan
          else
            terraform apply -auto-approve
          fi

          # Capture outputs for other workflows
          echo "Capturing Terraform outputs..."
          terraform output -json > outputs.json

      - name: Extract and Store Outputs
        id: outputs
        working-directory: ./terraform
        run: |
          # Extract key outputs
          API_URL=$(terraform output -raw api_url)
          API_APP_NAME=$(terraform output -raw api_app_service_name)
          DB_CONNECTION=$(terraform output -raw database_connection_string)
          STORAGE_ACCOUNT=$(terraform output -raw cli_storage_account)
          CDN_ENDPOINT=$(terraform output -raw cli_cdn_endpoint)

          echo "api_url=$API_URL" >> $GITHUB_OUTPUT
          echo "api_app_name=$API_APP_NAME" >> $GITHUB_OUTPUT
          echo "storage_account=$STORAGE_ACCOUNT" >> $GITHUB_OUTPUT
          echo "cdn_endpoint=$CDN_ENDPOINT" >> $GITHUB_OUTPUT

      - name: Update GitHub Secrets
        uses: actions/github-script@v7
        with:
          script: |
            const sodium = require('tweetsodium');

            async function setSecret(name, value) {
              const key = await github.rest.actions.getRepoPublicKey({
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              
              const encryptedValue = sodium.seal(
                Buffer.from(value),
                Buffer.from(key.data.key, 'base64')
              );
              
              await github.rest.actions.createOrUpdateRepoSecret({
                owner: context.repo.owner,
                repo: context.repo.repo,
                secret_name: name,
                encrypted_value: Buffer.from(encryptedValue).toString('base64'),
                key_id: key.data.key_id,
              });
            }

            // Update secrets from Terraform outputs
            await setSecret('API_URL', '${{ steps.outputs.outputs.api_url }}');
            await setSecret('API_APP_SERVICE_NAME', '${{ steps.outputs.outputs.api_app_name }}');
            await setSecret('CLI_STORAGE_ACCOUNT', '${{ steps.outputs.outputs.storage_account }}');
            await setSecret('CLI_CDN_ENDPOINT', '${{ steps.outputs.outputs.cdn_endpoint }}');

  terraform-destroy:
    name: Terraform Destroy
    runs-on: ubuntu-latest
    if: github.event.inputs.action == 'destroy'
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Destroy
        working-directory: ./terraform
        run: terraform destroy -auto-approve
